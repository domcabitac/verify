{
  "{\"sourceRoot\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"filename\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "filename": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require('./wpgulp.config.js');\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\n\n\nconst gulp = require('gulp'); // Gulp of-course.\n// CSS related plugins.\n\n\nconst sass = require('gulp-sass'); // Gulp plugin for Sass compilation.\n\n\nconst minifycss = require('gulp-uglifycss'); // Minifies CSS files.\n\n\nconst autoprefixer = require('gulp-autoprefixer'); // Autoprefixing magic.\n\n\nconst mmq = require('gulp-merge-media-queries'); // Combine matching media queries into one.\n\n\nconst rtlcss = require('gulp-rtlcss'); // Generates RTL stylesheet.\n// JS related plugins.\n\n\nconst concat = require('gulp-concat'); // Concatenates JS files.\n\n\nconst uglify = require('gulp-uglify'); // Minifies JS files.\n\n\nconst babel = require('gulp-babel'); // Compiles ESNext to browser compatible JS.\n// Image related plugins.\n\n\nconst imagemin = require('gulp-imagemin'); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n// Utility related plugins.\n\n\nconst rename = require('gulp-rename'); // Renames files E.g. style.css -> style.min.css.\n\n\nconst lineec = require('gulp-line-ending-corrector'); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\n\n\nconst filter = require('gulp-filter'); // Enables you to work on a subset of the original files by filtering them using a glob.\n\n\nconst sourcemaps = require('gulp-sourcemaps'); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\n\n\nconst notify = require('gulp-notify'); // Sends message notification to you.\n\n\nconst browserSync = require('browser-sync').create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\n\n\nconst wpPot = require('gulp-wp-pot'); // For generating the .pot file.\n\n\nconst sort = require('gulp-sort'); // Recommended to prevent unnecessary changes in pot-file.\n\n\nconst cache = require('gulp-cache'); // Cache files in stream for later use.\n\n\nconst remember = require('gulp-remember'); //  Adds all the files it has ever seen back into the stream.\n\n\nconst plumber = require('gulp-plumber'); // Prevent pipe breaking caused by errors from gulp plugins.\n\n\nconst beep = require('beepbeep');\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\n\n\nconst errorHandler = r => {\n  notify.onError('\\n\\n❌  ===> ERROR: <%= error.message %>\\n')(r);\n  beep(); // this.emit('end');\n};\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\n\n\nconst browsersync = done => {\n  browserSync.init({\n    proxy: config.projectURL,\n    open: config.browserAutoOpen,\n    injectChanges: config.injectChanges,\n    watchEvents: ['change', 'add', 'unlink', 'addDir', 'unlinkDir']\n  });\n  done();\n}; // Helper function to allow browser reload with Gulp 4.\n\n\nconst reload = done => {\n  browserSync.reload();\n  done();\n};\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\n\n\ngulp.task('styles', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(sourcemaps.write('./')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(browserSync.stream()) // Reloads style.css if that is enqueued.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.min.css if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\n\ngulp.task('stylesRTL', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(rename({\n    suffix: '-rtl'\n  })) // Append \"-rtl\" to the filename.\n  .pipe(rtlcss()) // Convert to RTL.\n  .pipe(sourcemaps.write('./')) // Output sourcemap for style-rtl.css.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES RTL — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\n\ngulp.task('vendorsJS', () => {\n  return gulp.src(config.jsVendorSRC, {\n    since: gulp.lastRun('vendorsJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST\n      } // Target browser list to support.\n\n    }]]\n  })).pipe(remember(config.jsVendorSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsVendorFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(rename({\n    basename: config.jsVendorFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(notify({\n    message: '\\n\\n✅  ===> VENDOR JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\n\ngulp.task('customJS', () => {\n  return gulp.src(config.jsCustomSRC, {\n    since: gulp.lastRun('customJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST\n      } // Target browser list to support.\n\n    }]]\n  })).pipe(remember(config.jsCustomSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsCustomFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(rename({\n    basename: config.jsCustomFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(notify({\n    message: '\\n\\n✅  ===> CUSTOM JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\n\ngulp.task('images', () => {\n  return gulp.src(config.imgSRC).pipe(cache(imagemin([imagemin.gifsicle({\n    interlaced: true\n  }), imagemin.jpegtran({\n    progressive: true\n  }), imagemin.optipng({\n    optimizationLevel: 3\n  }), // 0-7 low-high.\n  imagemin.svgo({\n    plugins: [{\n      removeViewBox: true\n    }, {\n      cleanupIDs: false\n    }]\n  })]))).pipe(gulp.dest(config.imgDST)).pipe(notify({\n    message: '\\n\\n✅  ===> IMAGES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\n\ngulp.task('clearCache', function (done) {\n  return cache.clearAll(done);\n});\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\n\ngulp.task('translate', () => {\n  return gulp.src(config.watchPhp).pipe(sort()).pipe(wpPot({\n    domain: config.textDomain,\n    package: config.packageName,\n    bugReport: config.bugReport,\n    lastTranslator: config.lastTranslator,\n    team: config.team\n  })).pipe(gulp.dest(config.translationDestination + '/' + config.translationFile)).pipe(notify({\n    message: '\\n\\n✅  ===> TRANSLATE — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\n\ngulp.task('default', gulp.parallel('styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n  gulp.watch(config.watchPhp, reload); // Reload on PHP file changes.\n\n  gulp.watch(config.watchStyles, gulp.parallel('styles')); // Reload on SCSS file changes.\n\n  gulp.watch(config.watchJsVendor, gulp.series('vendorsJS', reload)); // Reload on vendorsJS file changes.\n\n  gulp.watch(config.watchJsCustom, gulp.series('customJS', reload)); // Reload on customJS file changes.\n\n  gulp.watch(config.imgSRC, gulp.series('images', reload)); // Reload on customJS file changes.\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "config",
        "require",
        "gulp",
        "sass",
        "minifycss",
        "autoprefixer",
        "mmq",
        "rtlcss",
        "concat",
        "uglify",
        "babel",
        "imagemin",
        "rename",
        "lineec",
        "filter",
        "sourcemaps",
        "notify",
        "browserSync",
        "create",
        "wpPot",
        "sort",
        "cache",
        "remember",
        "plumber",
        "beep",
        "errorHandler",
        "r",
        "onError",
        "browsersync",
        "done",
        "init",
        "proxy",
        "projectURL",
        "open",
        "browserAutoOpen",
        "injectChanges",
        "watchEvents",
        "reload",
        "task",
        "src",
        "styleSRC",
        "allowEmpty",
        "pipe",
        "errLogToConsole",
        "outputStyle",
        "precision",
        "on",
        "logError",
        "write",
        "includeContent",
        "loadMaps",
        "BROWSERS_LIST",
        "dest",
        "styleDestination",
        "log",
        "stream",
        "suffix",
        "maxLineLen",
        "message",
        "onLast",
        "jsVendorSRC",
        "since",
        "lastRun",
        "presets",
        "targets",
        "browsers",
        "jsVendorFile",
        "jsVendorDestination",
        "basename",
        "jsCustomSRC",
        "jsCustomFile",
        "jsCustomDestination",
        "imgSRC",
        "gifsicle",
        "interlaced",
        "jpegtran",
        "progressive",
        "optipng",
        "optimizationLevel",
        "svgo",
        "plugins",
        "removeViewBox",
        "cleanupIDs",
        "imgDST",
        "clearAll",
        "watchPhp",
        "domain",
        "textDomain",
        "package",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "translationDestination",
        "translationFile",
        "parallel",
        "watch",
        "watchStyles",
        "watchJsVendor",
        "series",
        "watchJsCustom"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "sourcesContent": [
        "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require( './wpgulp.config.js' );\n\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\nconst gulp = require( 'gulp' ); // Gulp of-course.\n\n// CSS related plugins.\nconst sass = require( 'gulp-sass' ); // Gulp plugin for Sass compilation.\nconst minifycss = require( 'gulp-uglifycss' ); // Minifies CSS files.\nconst autoprefixer = require( 'gulp-autoprefixer' ); // Autoprefixing magic.\nconst mmq = require( 'gulp-merge-media-queries' ); // Combine matching media queries into one.\nconst rtlcss = require( 'gulp-rtlcss' ); // Generates RTL stylesheet.\n\n// JS related plugins.\nconst concat = require( 'gulp-concat' ); // Concatenates JS files.\nconst uglify = require( 'gulp-uglify' ); // Minifies JS files.\nconst babel = require( 'gulp-babel' ); // Compiles ESNext to browser compatible JS.\n\n// Image related plugins.\nconst imagemin = require( 'gulp-imagemin' ); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n\n// Utility related plugins.\nconst rename = require( 'gulp-rename' ); // Renames files E.g. style.css -> style.min.css.\nconst lineec = require( 'gulp-line-ending-corrector' ); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\nconst filter = require( 'gulp-filter' ); // Enables you to work on a subset of the original files by filtering them using a glob.\nconst sourcemaps = require( 'gulp-sourcemaps' ); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\nconst notify = require( 'gulp-notify' ); // Sends message notification to you.\nconst browserSync = require( 'browser-sync' ).create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\nconst wpPot = require( 'gulp-wp-pot' ); // For generating the .pot file.\nconst sort = require( 'gulp-sort' ); // Recommended to prevent unnecessary changes in pot-file.\nconst cache = require( 'gulp-cache' ); // Cache files in stream for later use.\nconst remember = require( 'gulp-remember' ); //  Adds all the files it has ever seen back into the stream.\nconst plumber = require( 'gulp-plumber' ); // Prevent pipe breaking caused by errors from gulp plugins.\nconst beep = require( 'beepbeep' );\n\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\nconst errorHandler = r => {\n\tnotify.onError( '\\n\\n❌  ===> ERROR: <%= error.message %>\\n' )( r );\n\tbeep();\n\n\t// this.emit('end');\n};\n\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\nconst browsersync = done => {\n\tbrowserSync.init({\n\t\tproxy: config.projectURL,\n\t\topen: config.browserAutoOpen,\n\t\tinjectChanges: config.injectChanges,\n\t\twatchEvents: [ 'change', 'add', 'unlink', 'addDir', 'unlinkDir' ]\n\t});\n\tdone();\n};\n\n// Helper function to allow browser reload with Gulp 4.\nconst reload = done => {\n\tbrowserSync.reload();\n\tdone();\n};\n\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'styles', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( sourcemaps.write( './' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( mmq({ log: true }) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css if that is enqueued.\n\t\t.pipe( rename({ suffix: '.min' }) )\n\t\t.pipe( minifycss({ maxLineLen: 10 }) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.min.css if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> STYLES — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'stylesRTL', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( rename({ suffix: '-rtl' }) ) // Append \"-rtl\" to the filename.\n\t\t.pipe( rtlcss() ) // Convert to RTL.\n\t\t.pipe( sourcemaps.write( './' ) ) // Output sourcemap for style-rtl.css.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( mmq({ log: true }) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( rename({ suffix: '.min' }) )\n\t\t.pipe( minifycss({ maxLineLen: 10 }) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> STYLES RTL — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\ngulp.task( 'vendorsJS', () => {\n\treturn gulp\n\t\t.src( config.jsVendorSRC, { since: gulp.lastRun( 'vendorsJS' ) }) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(\n\t\t\tbabel({\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: { browsers: config.BROWSERS_LIST } // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t})\n\t\t)\n\t\t.pipe( remember( config.jsVendorSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsVendorFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe(\n\t\t\trename({\n\t\t\t\tbasename: config.jsVendorFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t})\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> VENDOR JS — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\ngulp.task( 'customJS', () => {\n\treturn gulp\n\t\t.src( config.jsCustomSRC, { since: gulp.lastRun( 'customJS' ) }) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(\n\t\t\tbabel({\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: { browsers: config.BROWSERS_LIST } // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t})\n\t\t)\n\t\t.pipe( remember( config.jsCustomSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsCustomFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe(\n\t\t\trename({\n\t\t\t\tbasename: config.jsCustomFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t})\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> CUSTOM JS — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\ngulp.task( 'images', () => {\n\treturn gulp\n\t\t.src( config.imgSRC )\n\t\t.pipe(\n\t\t\tcache(\n\t\t\t\timagemin([\n\t\t\t\t\timagemin.gifsicle({ interlaced: true }),\n\t\t\t\t\timagemin.jpegtran({ progressive: true }),\n\t\t\t\t\timagemin.optipng({ optimizationLevel: 3 }), // 0-7 low-high.\n\t\t\t\t\timagemin.svgo({\n\t\t\t\t\t\tplugins: [ { removeViewBox: true }, { cleanupIDs: false } ]\n\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t)\n\t\t)\n\t\t.pipe( gulp.dest( config.imgDST ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> IMAGES — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\ngulp.task( 'clearCache', function( done ) {\n\treturn cache.clearAll( done );\n});\n\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\ngulp.task( 'translate', () => {\n\treturn gulp\n\t\t.src( config.watchPhp )\n\t\t.pipe( sort() )\n\t\t.pipe(\n\t\t\twpPot({\n\t\t\t\tdomain: config.textDomain,\n\t\t\t\tpackage: config.packageName,\n\t\t\t\tbugReport: config.bugReport,\n\t\t\t\tlastTranslator: config.lastTranslator,\n\t\t\t\tteam: config.team\n\t\t\t})\n\t\t)\n\t\t.pipe( gulp.dest( config.translationDestination + '/' + config.translationFile ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> TRANSLATE — completed!\\n', onLast: true }) );\n});\n\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\ngulp.task(\n\t'default',\n\tgulp.parallel( 'styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n\t\tgulp.watch( config.watchPhp, reload ); // Reload on PHP file changes.\n\t\tgulp.watch( config.watchStyles, gulp.parallel( 'styles' ) ); // Reload on SCSS file changes.\n\t\tgulp.watch( config.watchJsVendor, gulp.series( 'vendorsJS', reload ) ); // Reload on vendorsJS file changes.\n\t\tgulp.watch( config.watchJsCustom, gulp.series( 'customJS', reload ) ); // Reload on customJS file changes.\n\t\tgulp.watch( config.imgSRC, gulp.series( 'images', reload ) ); // Reload on customJS file changes.\n\t})\n);\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1601591216334
  },
  "{\"sourceRoot\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"filename\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "filename": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
        "sourceFileName": "wpgulp.config.js"
      }
    },
    "ast": null,
    "code": "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\nmodule.exports = {\n  // Project options.\n  projectURL: \"verify.local\",\n  // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n  productURL: \"./\",\n  // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n  browserAutoOpen: false,\n  injectChanges: true,\n  // Style options.\n  styleSRC: \"./assets/css/style.scss\",\n  // Path to main .scss file.\n  styleDestination: \"./\",\n  // Path to place the compiled CSS file. Default set to root folder.\n  outputStyle: \"compact\",\n  // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n  errLogToConsole: true,\n  precision: 10,\n  // JS Vendor options.\n  jsVendorSRC: \"./assets/js/vendor/*.js\",\n  // Path to JS vendor folder.\n  jsVendorDestination: \"./assets/js/\",\n  // Path to place the compiled JS vendors file.\n  jsVendorFile: \"vendor\",\n  // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n  // JS Custom options.\n  jsCustomSRC: \"./assets/js/custom/*.js\",\n  // Path to JS custom scripts folder.\n  jsCustomDestination: \"./assets/js/\",\n  // Path to place the compiled JS custom scripts file.\n  jsCustomFile: \"custom\",\n  // Compiled JS custom file name. Default set to custom i.e. custom.js.\n  // Images options.\n  imgSRC: \"./assets/img/raw/**/*\",\n  // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n  imgDST: \"./assets/img/\",\n  // Destination folder of optimized images. Must be different from the imagesSRC folder.\n  // Watch files paths.\n  watchStyles: \"./assets/css/**/*.scss\",\n  // Path to all *.scss files inside css folder and inside them.\n  watchJsVendor: \"./assets/js/vendor/*.js\",\n  // Path to all vendor JS files.\n  watchJsCustom: \"./assets/js/custom/*.js\",\n  // Path to all custom JS files.\n  watchPhp: \"./**/*.php\",\n  // Path to all PHP files.\n  // Translation options.\n  textDomain: \"WPGULP\",\n  // Your textdomain here.\n  translationFile: \"WPGULP.pot\",\n  // Name of the translation file.\n  translationDestination: \"./languages\",\n  // Where to save the translation files.\n  packageName: \"WPGULP\",\n  // Package name.\n  bugReport: \"https://AhmadAwais.com/contact/\",\n  // Where can users report bugs.\n  lastTranslator: \"Ahmad Awais <your_email@email.com>\",\n  // Last translator Email ID.\n  team: \"AhmadAwais <your_email@email.com>\",\n  // Team's Email ID.\n  // Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n  // The following list is set as per WordPress requirements. Though, Feel free to change.\n  BROWSERS_LIST: [\"last 2 version\", \"> 1%\", \"ie >= 11\", \"last 1 Android versions\", \"last 1 ChromeAndroid versions\", \"last 2 Chrome versions\", \"last 2 Firefox versions\", \"last 2 Safari versions\", \"last 2 iOS versions\", \"last 2 Edge versions\", \"last 2 Opera versions\"]\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndwZ3VscC5jb25maWcuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInByb2plY3RVUkwiLCJwcm9kdWN0VVJMIiwiYnJvd3NlckF1dG9PcGVuIiwiaW5qZWN0Q2hhbmdlcyIsInN0eWxlU1JDIiwic3R5bGVEZXN0aW5hdGlvbiIsIm91dHB1dFN0eWxlIiwiZXJyTG9nVG9Db25zb2xlIiwicHJlY2lzaW9uIiwianNWZW5kb3JTUkMiLCJqc1ZlbmRvckRlc3RpbmF0aW9uIiwianNWZW5kb3JGaWxlIiwianNDdXN0b21TUkMiLCJqc0N1c3RvbURlc3RpbmF0aW9uIiwianNDdXN0b21GaWxlIiwiaW1nU1JDIiwiaW1nRFNUIiwid2F0Y2hTdHlsZXMiLCJ3YXRjaEpzVmVuZG9yIiwid2F0Y2hKc0N1c3RvbSIsIndhdGNoUGhwIiwidGV4dERvbWFpbiIsInRyYW5zbGF0aW9uRmlsZSIsInRyYW5zbGF0aW9uRGVzdGluYXRpb24iLCJwYWNrYWdlTmFtZSIsImJ1Z1JlcG9ydCIsImxhc3RUcmFuc2xhdG9yIiwidGVhbSIsIkJST1dTRVJTX0xJU1QiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVNBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDaEI7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLGNBRkk7QUFFWTtBQUM1QkMsRUFBQUEsVUFBVSxFQUFFLElBSEk7QUFHRTtBQUNsQkMsRUFBQUEsZUFBZSxFQUFFLEtBSkQ7QUFLaEJDLEVBQUFBLGFBQWEsRUFBRSxJQUxDO0FBT2hCO0FBQ0FDLEVBQUFBLFFBQVEsRUFBRSx5QkFSTTtBQVFxQjtBQUNyQ0MsRUFBQUEsZ0JBQWdCLEVBQUUsSUFURjtBQVNRO0FBQ3hCQyxFQUFBQSxXQUFXLEVBQUUsU0FWRztBQVVRO0FBQ3hCQyxFQUFBQSxlQUFlLEVBQUUsSUFYRDtBQVloQkMsRUFBQUEsU0FBUyxFQUFFLEVBWks7QUFjaEI7QUFDQUMsRUFBQUEsV0FBVyxFQUFFLHlCQWZHO0FBZXdCO0FBQ3hDQyxFQUFBQSxtQkFBbUIsRUFBRSxjQWhCTDtBQWdCcUI7QUFDckNDLEVBQUFBLFlBQVksRUFBRSxRQWpCRTtBQWlCUTtBQUV4QjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUseUJBcEJHO0FBb0J3QjtBQUN4Q0MsRUFBQUEsbUJBQW1CLEVBQUUsY0FyQkw7QUFxQnFCO0FBQ3JDQyxFQUFBQSxZQUFZLEVBQUUsUUF0QkU7QUFzQlE7QUFFeEI7QUFDQUMsRUFBQUEsTUFBTSxFQUFFLHVCQXpCUTtBQXlCaUI7QUFDakNDLEVBQUFBLE1BQU0sRUFBRSxlQTFCUTtBQTBCUztBQUV6QjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUsd0JBN0JHO0FBNkJ1QjtBQUN2Q0MsRUFBQUEsYUFBYSxFQUFFLHlCQTlCQztBQThCMEI7QUFDMUNDLEVBQUFBLGFBQWEsRUFBRSx5QkEvQkM7QUErQjBCO0FBQzFDQyxFQUFBQSxRQUFRLEVBQUUsWUFoQ007QUFnQ1E7QUFFeEI7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLFFBbkNJO0FBbUNNO0FBQ3RCQyxFQUFBQSxlQUFlLEVBQUUsWUFwQ0Q7QUFvQ2U7QUFDL0JDLEVBQUFBLHNCQUFzQixFQUFFLGFBckNSO0FBcUN1QjtBQUN2Q0MsRUFBQUEsV0FBVyxFQUFFLFFBdENHO0FBc0NPO0FBQ3ZCQyxFQUFBQSxTQUFTLEVBQUUsaUNBdkNLO0FBdUM4QjtBQUM5Q0MsRUFBQUEsY0FBYyxFQUFFLG9DQXhDQTtBQXdDc0M7QUFDdERDLEVBQUFBLElBQUksRUFBRSxtQ0F6Q1U7QUF5QzJCO0FBRTNDO0FBQ0E7QUFDQUMsRUFBQUEsYUFBYSxFQUFFLENBQ2QsZ0JBRGMsRUFFZCxNQUZjLEVBR2QsVUFIYyxFQUlkLHlCQUpjLEVBS2QsK0JBTGMsRUFNZCx3QkFOYyxFQU9kLHlCQVBjLEVBUWQsd0JBUmMsRUFTZCxxQkFUYyxFQVVkLHNCQVZjLEVBV2QsdUJBWGM7QUE3Q0MsQ0FBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RvbWNhYml0YWMvTG9jYWwgU2l0ZXMvdmVyaWZ5L2FwcC9wdWJsaWMvd3AtY29udGVudC90aGVtZXMvdmVyaWZ5LyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV1BHdWxwIENvbmZpZ3VyYXRpb24gRmlsZVxuICpcbiAqIDEuIEVkaXQgdGhlIHZhcmlhYmxlcyBhcyBwZXIgeW91ciBwcm9qZWN0IHJlcXVpcmVtZW50cy5cbiAqIDIuIEluIHBhdGhzIHlvdSBjYW4gYWRkIDw8Z2xvYiBvciBhcnJheSBvZiBnbG9icz4+LlxuICpcbiAqIEBwYWNrYWdlIFdQR3VscFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvLyBQcm9qZWN0IG9wdGlvbnMuXG5cdHByb2plY3RVUkw6IFwidmVyaWZ5LmxvY2FsXCIsIC8vIExvY2FsIHByb2plY3QgVVJMIG9mIHlvdXIgYWxyZWFkeSBydW5uaW5nIFdvcmRQcmVzcyBzaXRlLiBDb3VsZCBiZSBzb21ldGhpbmcgbGlrZSB3cGd1bHAubG9jYWwgb3IgbG9jYWxob3N0OjMwMDAgZGVwZW5kaW5nIHVwb24geW91ciBsb2NhbCBXb3JkUHJlc3Mgc2V0dXAuXG5cdHByb2R1Y3RVUkw6IFwiLi9cIiwgLy8gVGhlbWUvUGx1Z2luIFVSTC4gTGVhdmUgaXQgbGlrZSBpdCBpcywgc2luY2Ugb3VyIGd1bHBmaWxlLmpzIGxpdmVzIGluIHRoZSByb290IGZvbGRlci5cblx0YnJvd3NlckF1dG9PcGVuOiBmYWxzZSxcblx0aW5qZWN0Q2hhbmdlczogdHJ1ZSxcblxuXHQvLyBTdHlsZSBvcHRpb25zLlxuXHRzdHlsZVNSQzogXCIuL2Fzc2V0cy9jc3Mvc3R5bGUuc2Nzc1wiLCAvLyBQYXRoIHRvIG1haW4gLnNjc3MgZmlsZS5cblx0c3R5bGVEZXN0aW5hdGlvbjogXCIuL1wiLCAvLyBQYXRoIHRvIHBsYWNlIHRoZSBjb21waWxlZCBDU1MgZmlsZS4gRGVmYXVsdCBzZXQgdG8gcm9vdCBmb2xkZXIuXG5cdG91dHB1dFN0eWxlOiBcImNvbXBhY3RcIiwgLy8gQXZhaWxhYmxlIG9wdGlvbnMg4oaSICdjb21wYWN0JyBvciAnY29tcHJlc3NlZCcgb3IgJ25lc3RlZCcgb3IgJ2V4cGFuZGVkJ1xuXHRlcnJMb2dUb0NvbnNvbGU6IHRydWUsXG5cdHByZWNpc2lvbjogMTAsXG5cblx0Ly8gSlMgVmVuZG9yIG9wdGlvbnMuXG5cdGpzVmVuZG9yU1JDOiBcIi4vYXNzZXRzL2pzL3ZlbmRvci8qLmpzXCIsIC8vIFBhdGggdG8gSlMgdmVuZG9yIGZvbGRlci5cblx0anNWZW5kb3JEZXN0aW5hdGlvbjogXCIuL2Fzc2V0cy9qcy9cIiwgLy8gUGF0aCB0byBwbGFjZSB0aGUgY29tcGlsZWQgSlMgdmVuZG9ycyBmaWxlLlxuXHRqc1ZlbmRvckZpbGU6IFwidmVuZG9yXCIsIC8vIENvbXBpbGVkIEpTIHZlbmRvcnMgZmlsZSBuYW1lLiBEZWZhdWx0IHNldCB0byB2ZW5kb3JzIGkuZS4gdmVuZG9ycy5qcy5cblxuXHQvLyBKUyBDdXN0b20gb3B0aW9ucy5cblx0anNDdXN0b21TUkM6IFwiLi9hc3NldHMvanMvY3VzdG9tLyouanNcIiwgLy8gUGF0aCB0byBKUyBjdXN0b20gc2NyaXB0cyBmb2xkZXIuXG5cdGpzQ3VzdG9tRGVzdGluYXRpb246IFwiLi9hc3NldHMvanMvXCIsIC8vIFBhdGggdG8gcGxhY2UgdGhlIGNvbXBpbGVkIEpTIGN1c3RvbSBzY3JpcHRzIGZpbGUuXG5cdGpzQ3VzdG9tRmlsZTogXCJjdXN0b21cIiwgLy8gQ29tcGlsZWQgSlMgY3VzdG9tIGZpbGUgbmFtZS4gRGVmYXVsdCBzZXQgdG8gY3VzdG9tIGkuZS4gY3VzdG9tLmpzLlxuXG5cdC8vIEltYWdlcyBvcHRpb25zLlxuXHRpbWdTUkM6IFwiLi9hc3NldHMvaW1nL3Jhdy8qKi8qXCIsIC8vIFNvdXJjZSBmb2xkZXIgb2YgaW1hZ2VzIHdoaWNoIHNob3VsZCBiZSBvcHRpbWl6ZWQgYW5kIHdhdGNoZWQuIFlvdSBjYW4gYWxzbyBzcGVjaWZ5IHR5cGVzIGUuZy4gcmF3LyoqLntwbmcsanBnLGdpZn0gaW4gdGhlIGdsb2IuXG5cdGltZ0RTVDogXCIuL2Fzc2V0cy9pbWcvXCIsIC8vIERlc3RpbmF0aW9uIGZvbGRlciBvZiBvcHRpbWl6ZWQgaW1hZ2VzLiBNdXN0IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBpbWFnZXNTUkMgZm9sZGVyLlxuXG5cdC8vIFdhdGNoIGZpbGVzIHBhdGhzLlxuXHR3YXRjaFN0eWxlczogXCIuL2Fzc2V0cy9jc3MvKiovKi5zY3NzXCIsIC8vIFBhdGggdG8gYWxsICouc2NzcyBmaWxlcyBpbnNpZGUgY3NzIGZvbGRlciBhbmQgaW5zaWRlIHRoZW0uXG5cdHdhdGNoSnNWZW5kb3I6IFwiLi9hc3NldHMvanMvdmVuZG9yLyouanNcIiwgLy8gUGF0aCB0byBhbGwgdmVuZG9yIEpTIGZpbGVzLlxuXHR3YXRjaEpzQ3VzdG9tOiBcIi4vYXNzZXRzL2pzL2N1c3RvbS8qLmpzXCIsIC8vIFBhdGggdG8gYWxsIGN1c3RvbSBKUyBmaWxlcy5cblx0d2F0Y2hQaHA6IFwiLi8qKi8qLnBocFwiLCAvLyBQYXRoIHRvIGFsbCBQSFAgZmlsZXMuXG5cblx0Ly8gVHJhbnNsYXRpb24gb3B0aW9ucy5cblx0dGV4dERvbWFpbjogXCJXUEdVTFBcIiwgLy8gWW91ciB0ZXh0ZG9tYWluIGhlcmUuXG5cdHRyYW5zbGF0aW9uRmlsZTogXCJXUEdVTFAucG90XCIsIC8vIE5hbWUgb2YgdGhlIHRyYW5zbGF0aW9uIGZpbGUuXG5cdHRyYW5zbGF0aW9uRGVzdGluYXRpb246IFwiLi9sYW5ndWFnZXNcIiwgLy8gV2hlcmUgdG8gc2F2ZSB0aGUgdHJhbnNsYXRpb24gZmlsZXMuXG5cdHBhY2thZ2VOYW1lOiBcIldQR1VMUFwiLCAvLyBQYWNrYWdlIG5hbWUuXG5cdGJ1Z1JlcG9ydDogXCJodHRwczovL0FobWFkQXdhaXMuY29tL2NvbnRhY3QvXCIsIC8vIFdoZXJlIGNhbiB1c2VycyByZXBvcnQgYnVncy5cblx0bGFzdFRyYW5zbGF0b3I6IFwiQWhtYWQgQXdhaXMgPHlvdXJfZW1haWxAZW1haWwuY29tPlwiLCAvLyBMYXN0IHRyYW5zbGF0b3IgRW1haWwgSUQuXG5cdHRlYW06IFwiQWhtYWRBd2FpcyA8eW91cl9lbWFpbEBlbWFpbC5jb20+XCIsIC8vIFRlYW0ncyBFbWFpbCBJRC5cblxuXHQvLyBCcm93c2VycyB5b3UgY2FyZSBhYm91dCBmb3IgYXV0b3ByZWZpeGluZy4gQnJvd3Nlcmxpc3QgaHR0cHM6Ly9naXRodWIuY29tL2FpL2Jyb3dzZXJzbGlzdFxuXHQvLyBUaGUgZm9sbG93aW5nIGxpc3QgaXMgc2V0IGFzIHBlciBXb3JkUHJlc3MgcmVxdWlyZW1lbnRzLiBUaG91Z2gsIEZlZWwgZnJlZSB0byBjaGFuZ2UuXG5cdEJST1dTRVJTX0xJU1Q6IFtcblx0XHRcImxhc3QgMiB2ZXJzaW9uXCIsXG5cdFx0XCI+IDElXCIsXG5cdFx0XCJpZSA+PSAxMVwiLFxuXHRcdFwibGFzdCAxIEFuZHJvaWQgdmVyc2lvbnNcIixcblx0XHRcImxhc3QgMSBDaHJvbWVBbmRyb2lkIHZlcnNpb25zXCIsXG5cdFx0XCJsYXN0IDIgQ2hyb21lIHZlcnNpb25zXCIsXG5cdFx0XCJsYXN0IDIgRmlyZWZveCB2ZXJzaW9uc1wiLFxuXHRcdFwibGFzdCAyIFNhZmFyaSB2ZXJzaW9uc1wiLFxuXHRcdFwibGFzdCAyIGlPUyB2ZXJzaW9uc1wiLFxuXHRcdFwibGFzdCAyIEVkZ2UgdmVyc2lvbnNcIixcblx0XHRcImxhc3QgMiBPcGVyYSB2ZXJzaW9uc1wiLFxuXHRdLFxufTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "wpgulp.config.js"
      ],
      "names": [
        "module",
        "exports",
        "projectURL",
        "productURL",
        "browserAutoOpen",
        "injectChanges",
        "styleSRC",
        "styleDestination",
        "outputStyle",
        "errLogToConsole",
        "precision",
        "jsVendorSRC",
        "jsVendorDestination",
        "jsVendorFile",
        "jsCustomSRC",
        "jsCustomDestination",
        "jsCustomFile",
        "imgSRC",
        "imgDST",
        "watchStyles",
        "watchJsVendor",
        "watchJsCustom",
        "watchPhp",
        "textDomain",
        "translationFile",
        "translationDestination",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "BROWSERS_LIST"
      ],
      "mappings": "AAAA;;;;;;;;AASAA,MAAM,CAACC,OAAP,GAAiB;AAChB;AACAC,EAAAA,UAAU,EAAE,cAFI;AAEY;AAC5BC,EAAAA,UAAU,EAAE,IAHI;AAGE;AAClBC,EAAAA,eAAe,EAAE,KAJD;AAKhBC,EAAAA,aAAa,EAAE,IALC;AAOhB;AACAC,EAAAA,QAAQ,EAAE,yBARM;AAQqB;AACrCC,EAAAA,gBAAgB,EAAE,IATF;AASQ;AACxBC,EAAAA,WAAW,EAAE,SAVG;AAUQ;AACxBC,EAAAA,eAAe,EAAE,IAXD;AAYhBC,EAAAA,SAAS,EAAE,EAZK;AAchB;AACAC,EAAAA,WAAW,EAAE,yBAfG;AAewB;AACxCC,EAAAA,mBAAmB,EAAE,cAhBL;AAgBqB;AACrCC,EAAAA,YAAY,EAAE,QAjBE;AAiBQ;AAExB;AACAC,EAAAA,WAAW,EAAE,yBApBG;AAoBwB;AACxCC,EAAAA,mBAAmB,EAAE,cArBL;AAqBqB;AACrCC,EAAAA,YAAY,EAAE,QAtBE;AAsBQ;AAExB;AACAC,EAAAA,MAAM,EAAE,uBAzBQ;AAyBiB;AACjCC,EAAAA,MAAM,EAAE,eA1BQ;AA0BS;AAEzB;AACAC,EAAAA,WAAW,EAAE,wBA7BG;AA6BuB;AACvCC,EAAAA,aAAa,EAAE,yBA9BC;AA8B0B;AAC1CC,EAAAA,aAAa,EAAE,yBA/BC;AA+B0B;AAC1CC,EAAAA,QAAQ,EAAE,YAhCM;AAgCQ;AAExB;AACAC,EAAAA,UAAU,EAAE,QAnCI;AAmCM;AACtBC,EAAAA,eAAe,EAAE,YApCD;AAoCe;AAC/BC,EAAAA,sBAAsB,EAAE,aArCR;AAqCuB;AACvCC,EAAAA,WAAW,EAAE,QAtCG;AAsCO;AACvBC,EAAAA,SAAS,EAAE,iCAvCK;AAuC8B;AAC9CC,EAAAA,cAAc,EAAE,oCAxCA;AAwCsC;AACtDC,EAAAA,IAAI,EAAE,mCAzCU;AAyC2B;AAE3C;AACA;AACAC,EAAAA,aAAa,EAAE,CACd,gBADc,EAEd,MAFc,EAGd,UAHc,EAId,yBAJc,EAKd,+BALc,EAMd,wBANc,EAOd,yBAPc,EAQd,wBARc,EASd,qBATc,EAUd,sBAVc,EAWd,uBAXc;AA7CC,CAAjB",
      "sourceRoot": "/Users/domcabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "sourcesContent": [
        "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\n\nmodule.exports = {\n\t// Project options.\n\tprojectURL: \"verify.local\", // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n\tproductURL: \"./\", // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n\tbrowserAutoOpen: false,\n\tinjectChanges: true,\n\n\t// Style options.\n\tstyleSRC: \"./assets/css/style.scss\", // Path to main .scss file.\n\tstyleDestination: \"./\", // Path to place the compiled CSS file. Default set to root folder.\n\toutputStyle: \"compact\", // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n\terrLogToConsole: true,\n\tprecision: 10,\n\n\t// JS Vendor options.\n\tjsVendorSRC: \"./assets/js/vendor/*.js\", // Path to JS vendor folder.\n\tjsVendorDestination: \"./assets/js/\", // Path to place the compiled JS vendors file.\n\tjsVendorFile: \"vendor\", // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n\n\t// JS Custom options.\n\tjsCustomSRC: \"./assets/js/custom/*.js\", // Path to JS custom scripts folder.\n\tjsCustomDestination: \"./assets/js/\", // Path to place the compiled JS custom scripts file.\n\tjsCustomFile: \"custom\", // Compiled JS custom file name. Default set to custom i.e. custom.js.\n\n\t// Images options.\n\timgSRC: \"./assets/img/raw/**/*\", // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n\timgDST: \"./assets/img/\", // Destination folder of optimized images. Must be different from the imagesSRC folder.\n\n\t// Watch files paths.\n\twatchStyles: \"./assets/css/**/*.scss\", // Path to all *.scss files inside css folder and inside them.\n\twatchJsVendor: \"./assets/js/vendor/*.js\", // Path to all vendor JS files.\n\twatchJsCustom: \"./assets/js/custom/*.js\", // Path to all custom JS files.\n\twatchPhp: \"./**/*.php\", // Path to all PHP files.\n\n\t// Translation options.\n\ttextDomain: \"WPGULP\", // Your textdomain here.\n\ttranslationFile: \"WPGULP.pot\", // Name of the translation file.\n\ttranslationDestination: \"./languages\", // Where to save the translation files.\n\tpackageName: \"WPGULP\", // Package name.\n\tbugReport: \"https://AhmadAwais.com/contact/\", // Where can users report bugs.\n\tlastTranslator: \"Ahmad Awais <your_email@email.com>\", // Last translator Email ID.\n\tteam: \"AhmadAwais <your_email@email.com>\", // Team's Email ID.\n\n\t// Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n\t// The following list is set as per WordPress requirements. Though, Feel free to change.\n\tBROWSERS_LIST: [\n\t\t\"last 2 version\",\n\t\t\"> 1%\",\n\t\t\"ie >= 11\",\n\t\t\"last 1 Android versions\",\n\t\t\"last 1 ChromeAndroid versions\",\n\t\t\"last 2 Chrome versions\",\n\t\t\"last 2 Firefox versions\",\n\t\t\"last 2 Safari versions\",\n\t\t\"last 2 iOS versions\",\n\t\t\"last 2 Edge versions\",\n\t\t\"last 2 Opera versions\",\n\t],\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1601591375413
  },
  "{\"sourceRoot\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"filename\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "filename": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require('./wpgulp.config.js');\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\n\n\nconst gulp = require('gulp'); // Gulp of-course.\n// CSS related plugins.\n\n\nconst sass = require('gulp-sass'); // Gulp plugin for Sass compilation.\n\n\nconst minifycss = require('gulp-uglifycss'); // Minifies CSS files.\n\n\nconst autoprefixer = require('gulp-autoprefixer'); // Autoprefixing magic.\n\n\nconst mmq = require('gulp-merge-media-queries'); // Combine matching media queries into one.\n\n\nconst rtlcss = require('gulp-rtlcss'); // Generates RTL stylesheet.\n// JS related plugins.\n\n\nconst concat = require('gulp-concat'); // Concatenates JS files.\n\n\nconst uglify = require('gulp-uglify'); // Minifies JS files.\n\n\nconst babel = require('gulp-babel'); // Compiles ESNext to browser compatible JS.\n// Image related plugins.\n\n\nconst imagemin = require('gulp-imagemin'); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n// Utility related plugins.\n\n\nconst rename = require('gulp-rename'); // Renames files E.g. style.css -> style.min.css.\n\n\nconst lineec = require('gulp-line-ending-corrector'); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\n\n\nconst filter = require('gulp-filter'); // Enables you to work on a subset of the original files by filtering them using a glob.\n\n\nconst sourcemaps = require('gulp-sourcemaps'); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\n\n\nconst notify = require('gulp-notify'); // Sends message notification to you.\n\n\nconst browserSync = require('browser-sync').create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\n\n\nconst wpPot = require('gulp-wp-pot'); // For generating the .pot file.\n\n\nconst sort = require('gulp-sort'); // Recommended to prevent unnecessary changes in pot-file.\n\n\nconst cache = require('gulp-cache'); // Cache files in stream for later use.\n\n\nconst remember = require('gulp-remember'); //  Adds all the files it has ever seen back into the stream.\n\n\nconst plumber = require('gulp-plumber'); // Prevent pipe breaking caused by errors from gulp plugins.\n\n\nconst beep = require('beepbeep');\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\n\n\nconst errorHandler = r => {\n  notify.onError('\\n\\n❌  ===> ERROR: <%= error.message %>\\n')(r);\n  beep(); // this.emit('end');\n};\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\n\n\nconst browsersync = done => {\n  browserSync.init({\n    proxy: config.projectURL,\n    open: config.browserAutoOpen,\n    injectChanges: config.injectChanges,\n    watchEvents: ['change', 'add', 'unlink', 'addDir', 'unlinkDir']\n  });\n  done();\n}; // Helper function to allow browser reload with Gulp 4.\n\n\nconst reload = done => {\n  browserSync.reload();\n  done();\n};\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\n\n\ngulp.task('styles', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(sourcemaps.write('./')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(browserSync.stream()) // Reloads style.css if that is enqueued.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.min.css if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\n\ngulp.task('stylesRTL', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(rename({\n    suffix: '-rtl'\n  })) // Append \"-rtl\" to the filename.\n  .pipe(rtlcss()) // Convert to RTL.\n  .pipe(sourcemaps.write('./')) // Output sourcemap for style-rtl.css.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES RTL — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\n\ngulp.task('vendorsJS', () => {\n  return gulp.src(config.jsVendorSRC, {\n    since: gulp.lastRun('vendorsJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST\n      } // Target browser list to support.\n\n    }]]\n  })).pipe(remember(config.jsVendorSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsVendorFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(rename({\n    basename: config.jsVendorFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(notify({\n    message: '\\n\\n✅  ===> VENDOR JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\n\ngulp.task('customJS', () => {\n  return gulp.src(config.jsCustomSRC, {\n    since: gulp.lastRun('customJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST\n      } // Target browser list to support.\n\n    }]]\n  })).pipe(remember(config.jsCustomSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsCustomFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(rename({\n    basename: config.jsCustomFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(notify({\n    message: '\\n\\n✅  ===> CUSTOM JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\n\ngulp.task('images', () => {\n  return gulp.src(config.imgSRC).pipe(cache(imagemin([imagemin.gifsicle({\n    interlaced: true\n  }), imagemin.jpegtran({\n    progressive: true\n  }), imagemin.optipng({\n    optimizationLevel: 3\n  }), // 0-7 low-high.\n  imagemin.svgo({\n    plugins: [{\n      removeViewBox: true\n    }, {\n      cleanupIDs: false\n    }]\n  })]))).pipe(gulp.dest(config.imgDST)).pipe(notify({\n    message: '\\n\\n✅  ===> IMAGES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\n\ngulp.task('clearCache', function (done) {\n  return cache.clearAll(done);\n});\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\n\ngulp.task('translate', () => {\n  return gulp.src(config.watchPhp).pipe(sort()).pipe(wpPot({\n    domain: config.textDomain,\n    package: config.packageName,\n    bugReport: config.bugReport,\n    lastTranslator: config.lastTranslator,\n    team: config.team\n  })).pipe(gulp.dest(config.translationDestination + '/' + config.translationFile)).pipe(notify({\n    message: '\\n\\n✅  ===> TRANSLATE — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\n\ngulp.task('default', gulp.parallel('styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n  gulp.watch(config.watchPhp, reload); // Reload on PHP file changes.\n\n  gulp.watch(config.watchStyles, gulp.parallel('styles')); // Reload on SCSS file changes.\n\n  gulp.watch(config.watchJsVendor, gulp.series('vendorsJS', reload)); // Reload on vendorsJS file changes.\n\n  gulp.watch(config.watchJsCustom, gulp.series('customJS', reload)); // Reload on customJS file changes.\n\n  gulp.watch(config.imgSRC, gulp.series('images', reload)); // Reload on customJS file changes.\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "config",
        "require",
        "gulp",
        "sass",
        "minifycss",
        "autoprefixer",
        "mmq",
        "rtlcss",
        "concat",
        "uglify",
        "babel",
        "imagemin",
        "rename",
        "lineec",
        "filter",
        "sourcemaps",
        "notify",
        "browserSync",
        "create",
        "wpPot",
        "sort",
        "cache",
        "remember",
        "plumber",
        "beep",
        "errorHandler",
        "r",
        "onError",
        "browsersync",
        "done",
        "init",
        "proxy",
        "projectURL",
        "open",
        "browserAutoOpen",
        "injectChanges",
        "watchEvents",
        "reload",
        "task",
        "src",
        "styleSRC",
        "allowEmpty",
        "pipe",
        "errLogToConsole",
        "outputStyle",
        "precision",
        "on",
        "logError",
        "write",
        "includeContent",
        "loadMaps",
        "BROWSERS_LIST",
        "dest",
        "styleDestination",
        "log",
        "stream",
        "suffix",
        "maxLineLen",
        "message",
        "onLast",
        "jsVendorSRC",
        "since",
        "lastRun",
        "presets",
        "targets",
        "browsers",
        "jsVendorFile",
        "jsVendorDestination",
        "basename",
        "jsCustomSRC",
        "jsCustomFile",
        "jsCustomDestination",
        "imgSRC",
        "gifsicle",
        "interlaced",
        "jpegtran",
        "progressive",
        "optipng",
        "optimizationLevel",
        "svgo",
        "plugins",
        "removeViewBox",
        "cleanupIDs",
        "imgDST",
        "clearAll",
        "watchPhp",
        "domain",
        "textDomain",
        "package",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "translationDestination",
        "translationFile",
        "parallel",
        "watch",
        "watchStyles",
        "watchJsVendor",
        "series",
        "watchJsCustom"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "sourcesContent": [
        "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require( './wpgulp.config.js' );\n\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\nconst gulp = require( 'gulp' ); // Gulp of-course.\n\n// CSS related plugins.\nconst sass = require( 'gulp-sass' ); // Gulp plugin for Sass compilation.\nconst minifycss = require( 'gulp-uglifycss' ); // Minifies CSS files.\nconst autoprefixer = require( 'gulp-autoprefixer' ); // Autoprefixing magic.\nconst mmq = require( 'gulp-merge-media-queries' ); // Combine matching media queries into one.\nconst rtlcss = require( 'gulp-rtlcss' ); // Generates RTL stylesheet.\n\n// JS related plugins.\nconst concat = require( 'gulp-concat' ); // Concatenates JS files.\nconst uglify = require( 'gulp-uglify' ); // Minifies JS files.\nconst babel = require( 'gulp-babel' ); // Compiles ESNext to browser compatible JS.\n\n// Image related plugins.\nconst imagemin = require( 'gulp-imagemin' ); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n\n// Utility related plugins.\nconst rename = require( 'gulp-rename' ); // Renames files E.g. style.css -> style.min.css.\nconst lineec = require( 'gulp-line-ending-corrector' ); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\nconst filter = require( 'gulp-filter' ); // Enables you to work on a subset of the original files by filtering them using a glob.\nconst sourcemaps = require( 'gulp-sourcemaps' ); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\nconst notify = require( 'gulp-notify' ); // Sends message notification to you.\nconst browserSync = require( 'browser-sync' ).create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\nconst wpPot = require( 'gulp-wp-pot' ); // For generating the .pot file.\nconst sort = require( 'gulp-sort' ); // Recommended to prevent unnecessary changes in pot-file.\nconst cache = require( 'gulp-cache' ); // Cache files in stream for later use.\nconst remember = require( 'gulp-remember' ); //  Adds all the files it has ever seen back into the stream.\nconst plumber = require( 'gulp-plumber' ); // Prevent pipe breaking caused by errors from gulp plugins.\nconst beep = require( 'beepbeep' );\n\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\nconst errorHandler = r => {\n\tnotify.onError( '\\n\\n❌  ===> ERROR: <%= error.message %>\\n' )( r );\n\tbeep();\n\n\t// this.emit('end');\n};\n\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\nconst browsersync = done => {\n\tbrowserSync.init({\n\t\tproxy: config.projectURL,\n\t\topen: config.browserAutoOpen,\n\t\tinjectChanges: config.injectChanges,\n\t\twatchEvents: [ 'change', 'add', 'unlink', 'addDir', 'unlinkDir' ]\n\t});\n\tdone();\n};\n\n// Helper function to allow browser reload with Gulp 4.\nconst reload = done => {\n\tbrowserSync.reload();\n\tdone();\n};\n\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'styles', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( sourcemaps.write( './' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( mmq({ log: true }) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css if that is enqueued.\n\t\t.pipe( rename({ suffix: '.min' }) )\n\t\t.pipe( minifycss({ maxLineLen: 10 }) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.min.css if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> STYLES — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'stylesRTL', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( rename({ suffix: '-rtl' }) ) // Append \"-rtl\" to the filename.\n\t\t.pipe( rtlcss() ) // Convert to RTL.\n\t\t.pipe( sourcemaps.write( './' ) ) // Output sourcemap for style-rtl.css.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( mmq({ log: true }) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( rename({ suffix: '.min' }) )\n\t\t.pipe( minifycss({ maxLineLen: 10 }) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> STYLES RTL — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\ngulp.task( 'vendorsJS', () => {\n\treturn gulp\n\t\t.src( config.jsVendorSRC, { since: gulp.lastRun( 'vendorsJS' ) }) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(\n\t\t\tbabel({\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: { browsers: config.BROWSERS_LIST } // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t})\n\t\t)\n\t\t.pipe( remember( config.jsVendorSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsVendorFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe(\n\t\t\trename({\n\t\t\t\tbasename: config.jsVendorFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t})\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> VENDOR JS — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\ngulp.task( 'customJS', () => {\n\treturn gulp\n\t\t.src( config.jsCustomSRC, { since: gulp.lastRun( 'customJS' ) }) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(\n\t\t\tbabel({\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: { browsers: config.BROWSERS_LIST } // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t})\n\t\t)\n\t\t.pipe( remember( config.jsCustomSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsCustomFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe(\n\t\t\trename({\n\t\t\t\tbasename: config.jsCustomFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t})\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> CUSTOM JS — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\ngulp.task( 'images', () => {\n\treturn gulp\n\t\t.src( config.imgSRC )\n\t\t.pipe(\n\t\t\tcache(\n\t\t\t\timagemin([\n\t\t\t\t\timagemin.gifsicle({ interlaced: true }),\n\t\t\t\t\timagemin.jpegtran({ progressive: true }),\n\t\t\t\t\timagemin.optipng({ optimizationLevel: 3 }), // 0-7 low-high.\n\t\t\t\t\timagemin.svgo({\n\t\t\t\t\t\tplugins: [ { removeViewBox: true }, { cleanupIDs: false } ]\n\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t)\n\t\t)\n\t\t.pipe( gulp.dest( config.imgDST ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> IMAGES — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\ngulp.task( 'clearCache', function( done ) {\n\treturn cache.clearAll( done );\n});\n\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\ngulp.task( 'translate', () => {\n\treturn gulp\n\t\t.src( config.watchPhp )\n\t\t.pipe( sort() )\n\t\t.pipe(\n\t\t\twpPot({\n\t\t\t\tdomain: config.textDomain,\n\t\t\t\tpackage: config.packageName,\n\t\t\t\tbugReport: config.bugReport,\n\t\t\t\tlastTranslator: config.lastTranslator,\n\t\t\t\tteam: config.team\n\t\t\t})\n\t\t)\n\t\t.pipe( gulp.dest( config.translationDestination + '/' + config.translationFile ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> TRANSLATE — completed!\\n', onLast: true }) );\n});\n\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\ngulp.task(\n\t'default',\n\tgulp.parallel( 'styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n\t\tgulp.watch( config.watchPhp, reload ); // Reload on PHP file changes.\n\t\tgulp.watch( config.watchStyles, gulp.parallel( 'styles' ) ); // Reload on SCSS file changes.\n\t\tgulp.watch( config.watchJsVendor, gulp.series( 'vendorsJS', reload ) ); // Reload on vendorsJS file changes.\n\t\tgulp.watch( config.watchJsCustom, gulp.series( 'customJS', reload ) ); // Reload on customJS file changes.\n\t\tgulp.watch( config.imgSRC, gulp.series( 'images', reload ) ); // Reload on customJS file changes.\n\t})\n);\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1605993862097
  },
  "{\"sourceRoot\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"filename\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "filename": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/wpgulp.config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
        "sourceFileName": "wpgulp.config.js"
      }
    },
    "ast": null,
    "code": "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\nmodule.exports = {\n  // Project options.\n  projectURL: \"verify.local\",\n  // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n  productURL: \"./\",\n  // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n  browserAutoOpen: false,\n  injectChanges: true,\n  // Style options.\n  styleSRC: \"./assets/css/style.scss\",\n  // Path to main .scss file.\n  styleDestination: \"./\",\n  // Path to place the compiled CSS file. Default set to root folder.\n  outputStyle: \"compact\",\n  // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n  errLogToConsole: true,\n  precision: 10,\n  // JS Vendor options.\n  jsVendorSRC: \"./assets/js/vendor/*.js\",\n  // Path to JS vendor folder.\n  jsVendorDestination: \"./assets/js/\",\n  // Path to place the compiled JS vendors file.\n  jsVendorFile: \"vendor\",\n  // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n  // JS Custom options.\n  jsCustomSRC: \"./assets/js/custom/*.js\",\n  // Path to JS custom scripts folder.\n  jsCustomDestination: \"./assets/js/\",\n  // Path to place the compiled JS custom scripts file.\n  jsCustomFile: \"custom\",\n  // Compiled JS custom file name. Default set to custom i.e. custom.js.\n  // Images options.\n  imgSRC: \"./assets/img/raw/**/*\",\n  // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n  imgDST: \"./assets/img/\",\n  // Destination folder of optimized images. Must be different from the imagesSRC folder.\n  // Watch files paths.\n  watchStyles: \"./assets/css/**/*.scss\",\n  // Path to all *.scss files inside css folder and inside them.\n  watchJsVendor: \"./assets/js/vendor/*.js\",\n  // Path to all vendor JS files.\n  watchJsCustom: \"./assets/js/custom/*.js\",\n  // Path to all custom JS files.\n  watchPhp: \"./**/*.php\",\n  // Path to all PHP files.\n  // Translation options.\n  textDomain: \"WPGULP\",\n  // Your textdomain here.\n  translationFile: \"WPGULP.pot\",\n  // Name of the translation file.\n  translationDestination: \"./languages\",\n  // Where to save the translation files.\n  packageName: \"WPGULP\",\n  // Package name.\n  bugReport: \"https://AhmadAwais.com/contact/\",\n  // Where can users report bugs.\n  lastTranslator: \"Ahmad Awais <your_email@email.com>\",\n  // Last translator Email ID.\n  team: \"AhmadAwais <your_email@email.com>\",\n  // Team's Email ID.\n  // Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n  // The following list is set as per WordPress requirements. Though, Feel free to change.\n  BROWSERS_LIST: [\"last 2 version\", \"> 1%\", \"ie >= 11\", \"last 1 Android versions\", \"last 1 ChromeAndroid versions\", \"last 2 Chrome versions\", \"last 2 Firefox versions\", \"last 2 Safari versions\", \"last 2 iOS versions\", \"last 2 Edge versions\", \"last 2 Opera versions\"]\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndwZ3VscC5jb25maWcuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInByb2plY3RVUkwiLCJwcm9kdWN0VVJMIiwiYnJvd3NlckF1dG9PcGVuIiwiaW5qZWN0Q2hhbmdlcyIsInN0eWxlU1JDIiwic3R5bGVEZXN0aW5hdGlvbiIsIm91dHB1dFN0eWxlIiwiZXJyTG9nVG9Db25zb2xlIiwicHJlY2lzaW9uIiwianNWZW5kb3JTUkMiLCJqc1ZlbmRvckRlc3RpbmF0aW9uIiwianNWZW5kb3JGaWxlIiwianNDdXN0b21TUkMiLCJqc0N1c3RvbURlc3RpbmF0aW9uIiwianNDdXN0b21GaWxlIiwiaW1nU1JDIiwiaW1nRFNUIiwid2F0Y2hTdHlsZXMiLCJ3YXRjaEpzVmVuZG9yIiwid2F0Y2hKc0N1c3RvbSIsIndhdGNoUGhwIiwidGV4dERvbWFpbiIsInRyYW5zbGF0aW9uRmlsZSIsInRyYW5zbGF0aW9uRGVzdGluYXRpb24iLCJwYWNrYWdlTmFtZSIsImJ1Z1JlcG9ydCIsImxhc3RUcmFuc2xhdG9yIiwidGVhbSIsIkJST1dTRVJTX0xJU1QiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVNBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDaEI7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLGNBRkk7QUFFWTtBQUM1QkMsRUFBQUEsVUFBVSxFQUFFLElBSEk7QUFHRTtBQUNsQkMsRUFBQUEsZUFBZSxFQUFFLEtBSkQ7QUFLaEJDLEVBQUFBLGFBQWEsRUFBRSxJQUxDO0FBT2hCO0FBQ0FDLEVBQUFBLFFBQVEsRUFBRSx5QkFSTTtBQVFxQjtBQUNyQ0MsRUFBQUEsZ0JBQWdCLEVBQUUsSUFURjtBQVNRO0FBQ3hCQyxFQUFBQSxXQUFXLEVBQUUsU0FWRztBQVVRO0FBQ3hCQyxFQUFBQSxlQUFlLEVBQUUsSUFYRDtBQVloQkMsRUFBQUEsU0FBUyxFQUFFLEVBWks7QUFjaEI7QUFDQUMsRUFBQUEsV0FBVyxFQUFFLHlCQWZHO0FBZXdCO0FBQ3hDQyxFQUFBQSxtQkFBbUIsRUFBRSxjQWhCTDtBQWdCcUI7QUFDckNDLEVBQUFBLFlBQVksRUFBRSxRQWpCRTtBQWlCUTtBQUV4QjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUseUJBcEJHO0FBb0J3QjtBQUN4Q0MsRUFBQUEsbUJBQW1CLEVBQUUsY0FyQkw7QUFxQnFCO0FBQ3JDQyxFQUFBQSxZQUFZLEVBQUUsUUF0QkU7QUFzQlE7QUFFeEI7QUFDQUMsRUFBQUEsTUFBTSxFQUFFLHVCQXpCUTtBQXlCaUI7QUFDakNDLEVBQUFBLE1BQU0sRUFBRSxlQTFCUTtBQTBCUztBQUV6QjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUsd0JBN0JHO0FBNkJ1QjtBQUN2Q0MsRUFBQUEsYUFBYSxFQUFFLHlCQTlCQztBQThCMEI7QUFDMUNDLEVBQUFBLGFBQWEsRUFBRSx5QkEvQkM7QUErQjBCO0FBQzFDQyxFQUFBQSxRQUFRLEVBQUUsWUFoQ007QUFnQ1E7QUFFeEI7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLFFBbkNJO0FBbUNNO0FBQ3RCQyxFQUFBQSxlQUFlLEVBQUUsWUFwQ0Q7QUFvQ2U7QUFDL0JDLEVBQUFBLHNCQUFzQixFQUFFLGFBckNSO0FBcUN1QjtBQUN2Q0MsRUFBQUEsV0FBVyxFQUFFLFFBdENHO0FBc0NPO0FBQ3ZCQyxFQUFBQSxTQUFTLEVBQUUsaUNBdkNLO0FBdUM4QjtBQUM5Q0MsRUFBQUEsY0FBYyxFQUFFLG9DQXhDQTtBQXdDc0M7QUFDdERDLEVBQUFBLElBQUksRUFBRSxtQ0F6Q1U7QUF5QzJCO0FBRTNDO0FBQ0E7QUFDQUMsRUFBQUEsYUFBYSxFQUFFLENBQ2QsZ0JBRGMsRUFFZCxNQUZjLEVBR2QsVUFIYyxFQUlkLHlCQUpjLEVBS2QsK0JBTGMsRUFNZCx3QkFOYyxFQU9kLHlCQVBjLEVBUWQsd0JBUmMsRUFTZCxxQkFUYyxFQVVkLHNCQVZjLEVBV2QsdUJBWGM7QUE3Q0MsQ0FBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RvbWluaWNjYWJpdGFjL0xvY2FsIFNpdGVzL3ZlcmlmeS9hcHAvcHVibGljL3dwLWNvbnRlbnQvdGhlbWVzL3ZlcmlmeS8iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdQR3VscCBDb25maWd1cmF0aW9uIEZpbGVcbiAqXG4gKiAxLiBFZGl0IHRoZSB2YXJpYWJsZXMgYXMgcGVyIHlvdXIgcHJvamVjdCByZXF1aXJlbWVudHMuXG4gKiAyLiBJbiBwYXRocyB5b3UgY2FuIGFkZCA8PGdsb2Igb3IgYXJyYXkgb2YgZ2xvYnM+Pi5cbiAqXG4gKiBAcGFja2FnZSBXUEd1bHBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Ly8gUHJvamVjdCBvcHRpb25zLlxuXHRwcm9qZWN0VVJMOiBcInZlcmlmeS5sb2NhbFwiLCAvLyBMb2NhbCBwcm9qZWN0IFVSTCBvZiB5b3VyIGFscmVhZHkgcnVubmluZyBXb3JkUHJlc3Mgc2l0ZS4gQ291bGQgYmUgc29tZXRoaW5nIGxpa2Ugd3BndWxwLmxvY2FsIG9yIGxvY2FsaG9zdDozMDAwIGRlcGVuZGluZyB1cG9uIHlvdXIgbG9jYWwgV29yZFByZXNzIHNldHVwLlxuXHRwcm9kdWN0VVJMOiBcIi4vXCIsIC8vIFRoZW1lL1BsdWdpbiBVUkwuIExlYXZlIGl0IGxpa2UgaXQgaXMsIHNpbmNlIG91ciBndWxwZmlsZS5qcyBsaXZlcyBpbiB0aGUgcm9vdCBmb2xkZXIuXG5cdGJyb3dzZXJBdXRvT3BlbjogZmFsc2UsXG5cdGluamVjdENoYW5nZXM6IHRydWUsXG5cblx0Ly8gU3R5bGUgb3B0aW9ucy5cblx0c3R5bGVTUkM6IFwiLi9hc3NldHMvY3NzL3N0eWxlLnNjc3NcIiwgLy8gUGF0aCB0byBtYWluIC5zY3NzIGZpbGUuXG5cdHN0eWxlRGVzdGluYXRpb246IFwiLi9cIiwgLy8gUGF0aCB0byBwbGFjZSB0aGUgY29tcGlsZWQgQ1NTIGZpbGUuIERlZmF1bHQgc2V0IHRvIHJvb3QgZm9sZGVyLlxuXHRvdXRwdXRTdHlsZTogXCJjb21wYWN0XCIsIC8vIEF2YWlsYWJsZSBvcHRpb25zIOKGkiAnY29tcGFjdCcgb3IgJ2NvbXByZXNzZWQnIG9yICduZXN0ZWQnIG9yICdleHBhbmRlZCdcblx0ZXJyTG9nVG9Db25zb2xlOiB0cnVlLFxuXHRwcmVjaXNpb246IDEwLFxuXG5cdC8vIEpTIFZlbmRvciBvcHRpb25zLlxuXHRqc1ZlbmRvclNSQzogXCIuL2Fzc2V0cy9qcy92ZW5kb3IvKi5qc1wiLCAvLyBQYXRoIHRvIEpTIHZlbmRvciBmb2xkZXIuXG5cdGpzVmVuZG9yRGVzdGluYXRpb246IFwiLi9hc3NldHMvanMvXCIsIC8vIFBhdGggdG8gcGxhY2UgdGhlIGNvbXBpbGVkIEpTIHZlbmRvcnMgZmlsZS5cblx0anNWZW5kb3JGaWxlOiBcInZlbmRvclwiLCAvLyBDb21waWxlZCBKUyB2ZW5kb3JzIGZpbGUgbmFtZS4gRGVmYXVsdCBzZXQgdG8gdmVuZG9ycyBpLmUuIHZlbmRvcnMuanMuXG5cblx0Ly8gSlMgQ3VzdG9tIG9wdGlvbnMuXG5cdGpzQ3VzdG9tU1JDOiBcIi4vYXNzZXRzL2pzL2N1c3RvbS8qLmpzXCIsIC8vIFBhdGggdG8gSlMgY3VzdG9tIHNjcmlwdHMgZm9sZGVyLlxuXHRqc0N1c3RvbURlc3RpbmF0aW9uOiBcIi4vYXNzZXRzL2pzL1wiLCAvLyBQYXRoIHRvIHBsYWNlIHRoZSBjb21waWxlZCBKUyBjdXN0b20gc2NyaXB0cyBmaWxlLlxuXHRqc0N1c3RvbUZpbGU6IFwiY3VzdG9tXCIsIC8vIENvbXBpbGVkIEpTIGN1c3RvbSBmaWxlIG5hbWUuIERlZmF1bHQgc2V0IHRvIGN1c3RvbSBpLmUuIGN1c3RvbS5qcy5cblxuXHQvLyBJbWFnZXMgb3B0aW9ucy5cblx0aW1nU1JDOiBcIi4vYXNzZXRzL2ltZy9yYXcvKiovKlwiLCAvLyBTb3VyY2UgZm9sZGVyIG9mIGltYWdlcyB3aGljaCBzaG91bGQgYmUgb3B0aW1pemVkIGFuZCB3YXRjaGVkLiBZb3UgY2FuIGFsc28gc3BlY2lmeSB0eXBlcyBlLmcuIHJhdy8qKi57cG5nLGpwZyxnaWZ9IGluIHRoZSBnbG9iLlxuXHRpbWdEU1Q6IFwiLi9hc3NldHMvaW1nL1wiLCAvLyBEZXN0aW5hdGlvbiBmb2xkZXIgb2Ygb3B0aW1pemVkIGltYWdlcy4gTXVzdCBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgaW1hZ2VzU1JDIGZvbGRlci5cblxuXHQvLyBXYXRjaCBmaWxlcyBwYXRocy5cblx0d2F0Y2hTdHlsZXM6IFwiLi9hc3NldHMvY3NzLyoqLyouc2Nzc1wiLCAvLyBQYXRoIHRvIGFsbCAqLnNjc3MgZmlsZXMgaW5zaWRlIGNzcyBmb2xkZXIgYW5kIGluc2lkZSB0aGVtLlxuXHR3YXRjaEpzVmVuZG9yOiBcIi4vYXNzZXRzL2pzL3ZlbmRvci8qLmpzXCIsIC8vIFBhdGggdG8gYWxsIHZlbmRvciBKUyBmaWxlcy5cblx0d2F0Y2hKc0N1c3RvbTogXCIuL2Fzc2V0cy9qcy9jdXN0b20vKi5qc1wiLCAvLyBQYXRoIHRvIGFsbCBjdXN0b20gSlMgZmlsZXMuXG5cdHdhdGNoUGhwOiBcIi4vKiovKi5waHBcIiwgLy8gUGF0aCB0byBhbGwgUEhQIGZpbGVzLlxuXG5cdC8vIFRyYW5zbGF0aW9uIG9wdGlvbnMuXG5cdHRleHREb21haW46IFwiV1BHVUxQXCIsIC8vIFlvdXIgdGV4dGRvbWFpbiBoZXJlLlxuXHR0cmFuc2xhdGlvbkZpbGU6IFwiV1BHVUxQLnBvdFwiLCAvLyBOYW1lIG9mIHRoZSB0cmFuc2xhdGlvbiBmaWxlLlxuXHR0cmFuc2xhdGlvbkRlc3RpbmF0aW9uOiBcIi4vbGFuZ3VhZ2VzXCIsIC8vIFdoZXJlIHRvIHNhdmUgdGhlIHRyYW5zbGF0aW9uIGZpbGVzLlxuXHRwYWNrYWdlTmFtZTogXCJXUEdVTFBcIiwgLy8gUGFja2FnZSBuYW1lLlxuXHRidWdSZXBvcnQ6IFwiaHR0cHM6Ly9BaG1hZEF3YWlzLmNvbS9jb250YWN0L1wiLCAvLyBXaGVyZSBjYW4gdXNlcnMgcmVwb3J0IGJ1Z3MuXG5cdGxhc3RUcmFuc2xhdG9yOiBcIkFobWFkIEF3YWlzIDx5b3VyX2VtYWlsQGVtYWlsLmNvbT5cIiwgLy8gTGFzdCB0cmFuc2xhdG9yIEVtYWlsIElELlxuXHR0ZWFtOiBcIkFobWFkQXdhaXMgPHlvdXJfZW1haWxAZW1haWwuY29tPlwiLCAvLyBUZWFtJ3MgRW1haWwgSUQuXG5cblx0Ly8gQnJvd3NlcnMgeW91IGNhcmUgYWJvdXQgZm9yIGF1dG9wcmVmaXhpbmcuIEJyb3dzZXJsaXN0IGh0dHBzOi8vZ2l0aHViLmNvbS9haS9icm93c2Vyc2xpc3Rcblx0Ly8gVGhlIGZvbGxvd2luZyBsaXN0IGlzIHNldCBhcyBwZXIgV29yZFByZXNzIHJlcXVpcmVtZW50cy4gVGhvdWdoLCBGZWVsIGZyZWUgdG8gY2hhbmdlLlxuXHRCUk9XU0VSU19MSVNUOiBbXG5cdFx0XCJsYXN0IDIgdmVyc2lvblwiLFxuXHRcdFwiPiAxJVwiLFxuXHRcdFwiaWUgPj0gMTFcIixcblx0XHRcImxhc3QgMSBBbmRyb2lkIHZlcnNpb25zXCIsXG5cdFx0XCJsYXN0IDEgQ2hyb21lQW5kcm9pZCB2ZXJzaW9uc1wiLFxuXHRcdFwibGFzdCAyIENocm9tZSB2ZXJzaW9uc1wiLFxuXHRcdFwibGFzdCAyIEZpcmVmb3ggdmVyc2lvbnNcIixcblx0XHRcImxhc3QgMiBTYWZhcmkgdmVyc2lvbnNcIixcblx0XHRcImxhc3QgMiBpT1MgdmVyc2lvbnNcIixcblx0XHRcImxhc3QgMiBFZGdlIHZlcnNpb25zXCIsXG5cdFx0XCJsYXN0IDIgT3BlcmEgdmVyc2lvbnNcIixcblx0XSxcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "wpgulp.config.js"
      ],
      "names": [
        "module",
        "exports",
        "projectURL",
        "productURL",
        "browserAutoOpen",
        "injectChanges",
        "styleSRC",
        "styleDestination",
        "outputStyle",
        "errLogToConsole",
        "precision",
        "jsVendorSRC",
        "jsVendorDestination",
        "jsVendorFile",
        "jsCustomSRC",
        "jsCustomDestination",
        "jsCustomFile",
        "imgSRC",
        "imgDST",
        "watchStyles",
        "watchJsVendor",
        "watchJsCustom",
        "watchPhp",
        "textDomain",
        "translationFile",
        "translationDestination",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "BROWSERS_LIST"
      ],
      "mappings": "AAAA;;;;;;;;AASAA,MAAM,CAACC,OAAP,GAAiB;AAChB;AACAC,EAAAA,UAAU,EAAE,cAFI;AAEY;AAC5BC,EAAAA,UAAU,EAAE,IAHI;AAGE;AAClBC,EAAAA,eAAe,EAAE,KAJD;AAKhBC,EAAAA,aAAa,EAAE,IALC;AAOhB;AACAC,EAAAA,QAAQ,EAAE,yBARM;AAQqB;AACrCC,EAAAA,gBAAgB,EAAE,IATF;AASQ;AACxBC,EAAAA,WAAW,EAAE,SAVG;AAUQ;AACxBC,EAAAA,eAAe,EAAE,IAXD;AAYhBC,EAAAA,SAAS,EAAE,EAZK;AAchB;AACAC,EAAAA,WAAW,EAAE,yBAfG;AAewB;AACxCC,EAAAA,mBAAmB,EAAE,cAhBL;AAgBqB;AACrCC,EAAAA,YAAY,EAAE,QAjBE;AAiBQ;AAExB;AACAC,EAAAA,WAAW,EAAE,yBApBG;AAoBwB;AACxCC,EAAAA,mBAAmB,EAAE,cArBL;AAqBqB;AACrCC,EAAAA,YAAY,EAAE,QAtBE;AAsBQ;AAExB;AACAC,EAAAA,MAAM,EAAE,uBAzBQ;AAyBiB;AACjCC,EAAAA,MAAM,EAAE,eA1BQ;AA0BS;AAEzB;AACAC,EAAAA,WAAW,EAAE,wBA7BG;AA6BuB;AACvCC,EAAAA,aAAa,EAAE,yBA9BC;AA8B0B;AAC1CC,EAAAA,aAAa,EAAE,yBA/BC;AA+B0B;AAC1CC,EAAAA,QAAQ,EAAE,YAhCM;AAgCQ;AAExB;AACAC,EAAAA,UAAU,EAAE,QAnCI;AAmCM;AACtBC,EAAAA,eAAe,EAAE,YApCD;AAoCe;AAC/BC,EAAAA,sBAAsB,EAAE,aArCR;AAqCuB;AACvCC,EAAAA,WAAW,EAAE,QAtCG;AAsCO;AACvBC,EAAAA,SAAS,EAAE,iCAvCK;AAuC8B;AAC9CC,EAAAA,cAAc,EAAE,oCAxCA;AAwCsC;AACtDC,EAAAA,IAAI,EAAE,mCAzCU;AAyC2B;AAE3C;AACA;AACAC,EAAAA,aAAa,EAAE,CACd,gBADc,EAEd,MAFc,EAGd,UAHc,EAId,yBAJc,EAKd,+BALc,EAMd,wBANc,EAOd,yBAPc,EAQd,wBARc,EASd,qBATc,EAUd,sBAVc,EAWd,uBAXc;AA7CC,CAAjB",
      "sourceRoot": "/Users/dominiccabitac/Local Sites/verify/app/public/wp-content/themes/verify/",
      "sourcesContent": [
        "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\n\nmodule.exports = {\n\t// Project options.\n\tprojectURL: \"verify.local\", // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n\tproductURL: \"./\", // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n\tbrowserAutoOpen: false,\n\tinjectChanges: true,\n\n\t// Style options.\n\tstyleSRC: \"./assets/css/style.scss\", // Path to main .scss file.\n\tstyleDestination: \"./\", // Path to place the compiled CSS file. Default set to root folder.\n\toutputStyle: \"compact\", // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n\terrLogToConsole: true,\n\tprecision: 10,\n\n\t// JS Vendor options.\n\tjsVendorSRC: \"./assets/js/vendor/*.js\", // Path to JS vendor folder.\n\tjsVendorDestination: \"./assets/js/\", // Path to place the compiled JS vendors file.\n\tjsVendorFile: \"vendor\", // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n\n\t// JS Custom options.\n\tjsCustomSRC: \"./assets/js/custom/*.js\", // Path to JS custom scripts folder.\n\tjsCustomDestination: \"./assets/js/\", // Path to place the compiled JS custom scripts file.\n\tjsCustomFile: \"custom\", // Compiled JS custom file name. Default set to custom i.e. custom.js.\n\n\t// Images options.\n\timgSRC: \"./assets/img/raw/**/*\", // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n\timgDST: \"./assets/img/\", // Destination folder of optimized images. Must be different from the imagesSRC folder.\n\n\t// Watch files paths.\n\twatchStyles: \"./assets/css/**/*.scss\", // Path to all *.scss files inside css folder and inside them.\n\twatchJsVendor: \"./assets/js/vendor/*.js\", // Path to all vendor JS files.\n\twatchJsCustom: \"./assets/js/custom/*.js\", // Path to all custom JS files.\n\twatchPhp: \"./**/*.php\", // Path to all PHP files.\n\n\t// Translation options.\n\ttextDomain: \"WPGULP\", // Your textdomain here.\n\ttranslationFile: \"WPGULP.pot\", // Name of the translation file.\n\ttranslationDestination: \"./languages\", // Where to save the translation files.\n\tpackageName: \"WPGULP\", // Package name.\n\tbugReport: \"https://AhmadAwais.com/contact/\", // Where can users report bugs.\n\tlastTranslator: \"Ahmad Awais <your_email@email.com>\", // Last translator Email ID.\n\tteam: \"AhmadAwais <your_email@email.com>\", // Team's Email ID.\n\n\t// Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n\t// The following list is set as per WordPress requirements. Though, Feel free to change.\n\tBROWSERS_LIST: [\n\t\t\"last 2 version\",\n\t\t\"> 1%\",\n\t\t\"ie >= 11\",\n\t\t\"last 1 Android versions\",\n\t\t\"last 1 ChromeAndroid versions\",\n\t\t\"last 2 Chrome versions\",\n\t\t\"last 2 Firefox versions\",\n\t\t\"last 2 Safari versions\",\n\t\t\"last 2 iOS versions\",\n\t\t\"last 2 Edge versions\",\n\t\t\"last 2 Opera versions\",\n\t],\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1605993862117
  }
}